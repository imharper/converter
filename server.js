const express = require('express');
const multer = require('multer');
const cors = require('cors');
const path = require('path');
const fs = require('fs-extra');
const sharp = require('sharp');
const mammoth = require('mammoth');
const pdf2pic = require('pdf2pic');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));
app.use('/converted', express.static('converted'));

// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
fs.ensureDirSync('uploads');
fs.ensureDirSync('converted');
fs.ensureDirSync('temp-conversion');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB –ª–∏–º–∏—Ç –Ω–∞ —Ñ–∞–π–ª
    files: 10 // –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|bmp|tiff|pdf|docx|doc/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (extname && mimetype) {
      return cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
const getBaseFileName = (originalName) => {
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ Buffer –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  let decodedName = originalName;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä—ã, –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
    if (decodedName.includes('√ê') || decodedName.includes('√¢') || decodedName.includes('√É')) {
      decodedName = Buffer.from(decodedName, 'latin1').toString('utf8');
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', error.message);
    decodedName = originalName;
  }
  
  const parsed = path.parse(decodedName);
  // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
  const cleanName = parsed.name.replace(/[^\w\u0400-\u04FF\-\s]/g, '_').replace(/\s+/g, '_');
  return cleanName;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LibreOffice
const convertWithLibreOffice = async (inputPath, outputDir, outputFormat, originalName) => {
  try {
    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é ${inputPath} –≤ ${outputFormat}...`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const tempDir = path.join('temp-conversion', Date.now().toString());
    fs.ensureDirSync(tempDir);
    
    // –ö–æ–º–∞–Ω–¥–∞ LibreOffice –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    let filterName;
    let extension;
    
    switch (outputFormat.toLowerCase()) {
      case 'pdf':
        filterName = 'writer_pdf_Export';
        extension = 'pdf';
        break;
      case 'docx':
        filterName = 'Office Open XML Text';
        extension = 'docx';
        break;
      case 'odt':
        filterName = 'writer8';
        extension = 'odt';
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${outputFormat}`);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Java
    const env = {
      ...process.env,
      JAVA_HOME: '/usr/lib/jvm/java-24-openjdk',
      PATH: `/usr/lib/jvm/java-24-openjdk/bin:${process.env.PATH}`,
      HOME: process.env.HOME
    };
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const command = `libreoffice --headless --convert-to ${extension} --outdir "${tempDir}" "${inputPath}"`;
    console.log('–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É:', command);
    
    const { stdout, stderr } = await execAsync(command, { 
      env: env,
      timeout: 45000 // 45 —Å–µ–∫—É–Ω–¥ timeout
    });
    
    console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è stdout:', stdout);
    if (stderr) console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è stderr:', stderr);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    const files = fs.readdirSync(tempDir);
    console.log('–§–∞–π–ª—ã –≤ temp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', files);
    
    const convertedFile = files.find(file => file.endsWith(`.${extension}`));
    
    if (!convertedFile) {
      // –î–ª—è PDF –≤ DOCX –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥
      if (outputFormat === 'docx') {
        throw new Error('LibreOffice_fallback_needed');
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    const baseFileName = getBaseFileName(originalName);
    const outputFileName = `${baseFileName}_converted.${extension}`;
    const tempFilePath = path.join(tempDir, convertedFile);
    const finalOutputPath = path.join(outputDir, outputFileName);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fs.moveSync(tempFilePath, finalOutputPath);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fs.removeSync(tempDir);
    
    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${finalOutputPath}`);
    return {
      success: true,
      outputPath: finalOutputPath,
      outputFileName: outputFileName
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ DOCX —á–µ—Ä–µ–∑ python pdf2docx –±–∏–±–ª–∏–æ—Ç–µ–∫—É (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
const convertPdfToDocxWithPdf2docx = async (inputPath, outputDir, originalName) => {
  try {
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º Python pdf2docx –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...');
    
    const baseFileName = `${getBaseFileName(originalName)}`;
    const outputFileName = `${baseFileName}_converted.docx`;
    const outputPath = path.join(outputDir, outputFileName);
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ venv
    const pythonScript = path.join(__dirname, 'pdf_converter.py');
    const venvPython = path.join(__dirname, 'venv', 'bin', 'python');
    
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π:');
    console.log('  Python script:', pythonScript);
    console.log('  Venv Python:', venvPython);
    console.log('  Venv exists:', fs.existsSync(venvPython));
    console.log('  Script exists:', fs.existsSync(pythonScript));
    console.log('  Input file exists:', fs.existsSync(inputPath));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ venv Python, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π
    const pythonExecutable = fs.existsSync(venvPython) ? venvPython : 'python3';
    const command = `"${pythonExecutable}" "${pythonScript}" "${inputPath}" "${outputPath}" --json`;
    
    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É:', command);
    
    try {
      const { stdout, stderr } = await execAsync(command, { 
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ timeout
        env: {
          ...process.env,
          ...(fs.existsSync(venvPython) ? {
            VIRTUAL_ENV: path.join(__dirname, 'venv'),
            PATH: `${path.join(__dirname, 'venv', 'bin')}:${process.env.PATH}`
          } : {})
        }
      });
      
      console.log('üì§ Python stdout length:', stdout.length);
      console.log('üì§ Python stdout:', JSON.stringify(stdout));
      
      if (stderr) {
        console.log('‚ö†Ô∏è Python stderr:', stderr);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ stdout –Ω–µ –ø—É—Å—Ç–æ–π
      if (!stdout || stdout.trim().length === 0) {
        throw new Error('Python —Å–∫—Ä–∏–ø—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ pdf2docx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ venv.');
      }
      
      // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Python —Å–∫—Ä–∏–ø—Ç–∞
      let result;
      try {
        result = JSON.parse(stdout.trim());
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Python —Å–∫—Ä–∏–ø—Ç–∞:', parseError);
        console.log('üì§ Raw Python stdout:', stdout);
        console.log('üì§ Trimmed stdout:', stdout.trim());
        throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Python —Å–∫—Ä–∏–ø—Ç–∞: ${parseError.message}`);
      }
      
      if (!result.success) {
        throw new Error(result.error || 'Python –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
      console.log(`‚úÖ pdf2docx –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.statistics?.total_pages || 'Unknown'} —Å—Ç—Ä–∞–Ω–∏—Ü`);
      
      return {
        success: true,
        outputPath: outputPath,
        outputFileName: outputFileName,
        method: 'pdf2docx library (Python)',
        statistics: {
          pages: result.statistics?.total_pages || 'Unknown',
          converted_pages: result.statistics?.converted_pages || 'Unknown',
          format: result.statistics?.format || 'High-quality PDF to DOCX conversion',
          preserves: result.statistics?.preserves || ['formatting', 'tables', 'images', 'text structure'],
          file_size: result.file_size
        }
      };
      
    } catch (execError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–º–∞–Ω–¥—ã:', execError);
      throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞: ${execError.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ pdf2docx –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
    throw error;
  }
};

// API Routes

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª)
app.post('/api/convert/image', upload.single('file'), async (req, res) => {
  try {
    const { file } = req;
    const { format, quality } = req.body;
    
    if (!file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const baseFileName = getBaseFileName(file.originalname);
    const outputFilename = `${baseFileName}_converted.${format}`;
    const outputPath = path.join('converted', outputFilename);

    let sharpInstance = sharp(file.path);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    switch (format) {
      case 'jpeg':
      case 'jpg':
        sharpInstance = sharpInstance.jpeg({ quality: parseInt(quality) || 90 });
        break;
      case 'png':
        sharpInstance = sharpInstance.png({ quality: parseInt(quality) || 90 });
        break;
      case 'webp':
        sharpInstance = sharpInstance.webp({ quality: parseInt(quality) || 90 });
        break;
      case 'avif':
        sharpInstance = sharpInstance.avif({ quality: parseInt(quality) || 90 });
        break;
      default:
        return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç' });
    }

    await sharpInstance.toFile(outputPath);

    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(file.path);

    res.json({
      success: true,
      downloadUrl: `/converted/${outputFilename}`,
      filename: outputFilename,
      originalName: Buffer.from(file.originalname, 'latin1').toString('utf8')
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.post('/api/convert/images', upload.array('files', 10), async (req, res) => {
  try {
    const { files } = req;
    const { format, quality } = req.body;
    
    if (!files || files.length === 0) {
      return res.status(400).json({ error: '–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    const results = [];
    const errors = [];

    for (const file of files) {
      try {
        const baseFileName = getBaseFileName(file.originalname);
        const outputFilename = `${baseFileName}_converted.${format}`;
        const outputPath = path.join('converted', outputFilename);

        let sharpInstance = sharp(file.path);

        switch (format) {
          case 'jpeg':
          case 'jpg':
            sharpInstance = sharpInstance.jpeg({ quality: parseInt(quality) || 90 });
            break;
          case 'png':
            sharpInstance = sharpInstance.png({ quality: parseInt(quality) || 90 });
            break;
          case 'webp':
            sharpInstance = sharpInstance.webp({ quality: parseInt(quality) || 90 });
            break;
          case 'avif':
            sharpInstance = sharpInstance.avif({ quality: parseInt(quality) || 90 });
            break;
          default:
            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }

        await sharpInstance.toFile(outputPath);
        fs.unlinkSync(file.path);

        results.push({
          originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
          filename: outputFilename,
          downloadUrl: `/converted/${outputFilename}`,
          success: true
        });

      } catch (error) {
        errors.push({
          originalName: file.originalname,
          error: error.message
        });
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (fs.existsSync(file.path)) {
          fs.unlinkSync(file.path);
        }
      }
    }

    res.json({
      success: true,
      results: results,
      errors: errors,
      total: files.length,
      converted: results.length,
      failed: errors.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.post('/api/convert/pdf-to-image', upload.single('file'), async (req, res) => {
  try {
    const { file } = req;
    const { format, quality } = req.body;
    
    if (!file) {
      return res.status(400).json({ error: 'PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const baseFileName = getBaseFileName(file.originalname);
    const convert = pdf2pic.fromPath(file.path, {
      density: 300,
      saveFilename: `${baseFileName}_page`,
      savePath: './converted/',
      format: format || 'png',
      width: 2480,
      height: 3508
    });

    const results = await convert.bulk(-1);
    
    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(file.path);

    const downloadUrls = results.map(result => ({
      page: result.page,
      url: `/converted/${path.basename(result.path)}`
    }));

    res.json({
      success: true,
      pages: downloadUrls,
      totalPages: results.length,
      originalName: Buffer.from(file.originalname, 'latin1').toString('utf8')
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF' });
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ DOCX —á–µ—Ä–µ–∑ pdf2docx
app.post('/api/convert/pdf-to-docx', upload.single('file'), async (req, res) => {
  try {
    const { file } = req;
    
    if (!file) {
      return res.status(400).json({ error: 'PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF –≤ DOCX —á–µ—Ä–µ–∑ pdf2docx...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pdf2docx –º–µ—Ç–æ–¥
    const result = await convertPdfToDocxWithPdf2docx(
      file.path,
      'converted',
      file.originalname
    );
    
    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(file.path);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
    const stats = fs.statSync(result.outputPath);

    res.json({
      success: true,
      downloadUrl: `/converted/${result.outputFileName}`,
      filename: result.outputFileName,
      originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
      fileSize: stats.size,
      conversionMethod: result.method,
      quality: result.statistics?.format || 'High-quality PDF to DOCX conversion',
      statistics: result.statistics
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ DOCX:', error);
    res.status(500).json({ 
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ DOCX: ${error.message}`,
      suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python –∏ pdf2docx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PDF —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º.'
    });
  }
});

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ DOCX —á–µ—Ä–µ–∑ pdf2docx
app.post('/api/convert/pdfs-to-docx', upload.array('files', 10), async (req, res) => {
  try {
    const { files } = req;
    
    if (!files || files.length === 0) {
      return res.status(400).json({ error: 'PDF —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    const results = [];
    const errors = [];

    for (const file of files) {
      try {
        console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${file.originalname} —á–µ—Ä–µ–∑ pdf2docx...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pdf2docx –º–µ—Ç–æ–¥
        const result = await convertPdfToDocxWithPdf2docx(
          file.path,
          'converted',
          file.originalname
        );
        
        fs.unlinkSync(file.path);
        const stats = fs.statSync(result.outputPath);

        results.push({
          originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
          filename: result.outputFileName,
          downloadUrl: `/converted/${result.outputFileName}`,
          fileSize: stats.size,
          conversionMethod: result.method,
          statistics: result.statistics,
          success: true
        });

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${file.originalname}:`, error);
        errors.push({
          originalName: file.originalname,
          error: error.message
        });
        if (fs.existsSync(file.path)) {
          fs.unlinkSync(file.path);
        }
      }
    }

    res.json({
      success: true,
      results: results,
      errors: errors,
      total: files.length,
      converted: results.length,
      failed: errors.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF —Ñ–∞–π–ª–æ–≤' });
  }
});

// –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF —á–µ—Ä–µ–∑ LibreOffice
app.post('/api/convert/docx-to-pdf', upload.single('file'), async (req, res) => {
  try {
    const { file } = req;
    
    if (!file) {
      return res.status(400).json({ error: 'DOCX —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é DOCX –≤ PDF...');
    
    const result = await convertWithLibreOffice(
      file.path, 
      'converted', 
      'pdf',
      file.originalname
    );
    
    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(file.path);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
    const stats = fs.statSync(result.outputPath);

    res.json({
      success: true,
      downloadUrl: `/converted/${result.outputFileName}`,
      filename: result.outputFileName,
      originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
      fileSize: stats.size,
      conversionMethod: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è',
      quality: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX –≤ PDF:', error);
    res.status(500).json({ 
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX –≤ PDF: ${error.message}`,
      suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DOCX —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'
    });
  }
});

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ HTML/—Ç–µ–∫—Å—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
app.post('/api/convert/docx', upload.single('file'), async (req, res) => {
  try {
    const { file } = req;
    const { format } = req.body;
    
    if (!file) {
      return res.status(400).json({ error: 'DOCX —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    let result;
    let outputFilename;
    let outputPath;
    const baseFileName = getBaseFileName(file.originalname);

    switch (format) {
      case 'html':
        result = await mammoth.convertToHtml({ path: file.path });
        outputFilename = `${baseFileName}_converted.html`;
        outputPath = path.join('converted', outputFilename);
        fs.writeFileSync(outputPath, result.value);
        break;
      case 'txt':
        result = await mammoth.extractRawText({ path: file.path });
        outputFilename = `${baseFileName}_converted.txt`;
        outputPath = path.join('converted', outputFilename);
        fs.writeFileSync(outputPath, result.value);
        break;
      case 'pdf':
        // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é DOCX –≤ PDF
        return res.redirect(307, '/api/convert/docx-to-pdf');
      default:
        return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞' });
    }

    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(file.path);

    res.json({
      success: true,
      downloadUrl: `/converted/${outputFilename}`,
      filename: outputFilename,
      originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
      warnings: result.messages || []
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
app.get('/api/file-info/:filename', (req, res) => {
  try {
    const filename = req.params.filename;
    const filepath = path.join('converted', filename);
    
    if (!fs.existsSync(filepath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const stats = fs.statSync(filepath);
    res.json({
      filename,
      size: stats.size,
      created: stats.birthtime,
      modified: stats.mtime
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ' });
  }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
app.get('/api/download/:filename', (req, res) => {
  try {
    const filename = req.params.filename;
    const filepath = path.join('converted', filename);
    
    if (!fs.existsSync(filepath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.download(filepath, filename);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
  }
});

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF
app.post('/api/convert/docxs-to-pdf', upload.array('files', 10), async (req, res) => {
  try {
    const { files } = req;
    
    if (!files || files.length === 0) {
      return res.status(400).json({ error: 'DOCX —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
    }

    const results = [];
    const errors = [];

    for (const file of files) {
      try {
        console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${file.originalname} –≤ PDF...`);
        
        const result = await convertWithLibreOffice(
          file.path, 
          'converted', 
          'pdf',
          file.originalname
        );
        
        fs.unlinkSync(file.path);
        const stats = fs.statSync(result.outputPath);

        results.push({
          originalName: Buffer.from(file.originalname, 'latin1').toString('utf8'),
          filename: result.outputFileName,
          downloadUrl: `/converted/${result.outputFileName}`,
          fileSize: stats.size,
          conversionMethod: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è',
          success: true
        });

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${file.originalname}:`, error);
        errors.push({
          originalName: file.originalname,
          error: error.message
        });
        if (fs.existsSync(file.path)) {
          fs.unlinkSync(file.path);
        }
      }
    }

    res.json({
      success: true,
      results: results,
      errors: errors,
      total: files.length,
      converted: results.length,
      failed: errors.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX —Ñ–∞–π–ª–æ–≤' });
  }
});

// Serve React app in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'client/build')));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
  });
}

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}); 